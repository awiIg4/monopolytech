//
//  APITester.swift
//  monopolytech
//
//  Created by eugenio on 17/03/2025.
//

import Foundation
import SwiftUI

// Classe pour tester les fonctionnalit√©s de l'API
class APITester {
    static let shared = APITester()
    private let gameService = GameService.shared
    
    // Teste la r√©cup√©ration des jeux
    func testFetchGames() async {
        do {
            print("üì± Testing fetchGames()...")
            let games = try await gameService.fetchGames()
            print("‚úÖ Successfully fetched \(games.count) games")
            if let firstGame = games.first {
                print("First game: \(firstGame.licence_name ?? "Unknown")")
                print("Price: \(firstGame.prix) ‚Ç¨")
            }
        } catch {
            print("‚ùå Error fetching games: \(error.localizedDescription)")
        }
    }
    
    // Teste la r√©cup√©ration des d√©tails d'un jeu
    func testFetchGameDetails() async {
        do {
            print("üì± Testing fetchGames() first, to get an ID...")
            let games = try await gameService.fetchGames()
            
            guard let firstGame = games.first, let id = firstGame.id else {
                print("‚ùå No games available to test details")
                return
            }
            
            print("üì± Testing fetchGame(id: \(id))...")
            let gameDetails = try await gameService.fetchGame(id: id)
            print("‚úÖ Successfully fetched game details for: \(gameDetails.licence_name ?? "Unknown")")
        } catch {
            print("‚ùå Error fetching game details: \(error.localizedDescription)")
        }
    }
    
    // Teste l'acc√®s √† la liste des utilisateurs
    func testGetUsers() async {
        print("üì± Testing getUsers endpoint '/utilisateurs'...")
        
        do {
            // Test d'acc√®s au point d'acc√®s des utilisateurs
            let (responseData, statusCode, _) = try await APIService.shared.requestWithHeaders(
                "utilisateurs", 
                httpMethod: "GET"
            )
            
            if (200...299).contains(statusCode) {
                print("‚úÖ Successfully accessed users endpoint with status: \(statusCode)")
                let responseString = String(data: responseData, encoding: .utf8) ?? "No data"
                print("Response preview: \(responseString.prefix(200))...")
                
                // Tentative de d√©codage des donn√©es
                do {
                    let decoder = JSONDecoder()
                    let users = try decoder.decode([User].self, from: responseData)
                    print("‚úÖ Successfully parsed \(users.count) users")
                } catch {
                    print("‚ö†Ô∏è Could not parse users data: \(error.localizedDescription)")
                    print("Raw response: \(responseString)")
                }
            } else {
                print("‚ùå Failed to access users endpoint. Status: \(statusCode)")
            }
        } catch {
            print("‚ùå Error fetching users: \(error.localizedDescription)")
        }
    }
    
    // Ex√©cute tous les tests disponibles
    func runAllTests() async {
        await testFetchGames()
        print("\n-------------------\n")
        await testFetchGameDetails()
        print("\n-------------------\n")
        await testGetUsers()
    }
}
